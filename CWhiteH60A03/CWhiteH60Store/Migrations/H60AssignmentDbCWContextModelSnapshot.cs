// <auto-generated />
using System;
using CWhiteH60Store.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CWhiteH60Store.Migrations
{
    [DbContext(typeof(H60AssignmentDbCWContext))]
    partial class H60AssignmentDbCWContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CWhiteH60Store.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreditCard")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Province")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Taxes")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<decimal?>("BuyPrice")
                        .IsRequired()
                        .HasColumnType("numeric(8, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ProdCatId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellPrice")
                        .IsRequired()
                        .HasColumnType("numeric(8, 2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex(new[] { "ProdCatId" }, "IX_Product_ProdCatId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            BuyPrice = 750.00m,
                            Description = "Sonar MA1850v2",
                            Manufacturer = "North",
                            ProdCatId = 2,
                            SellPrice = 900.00m,
                            Stock = 4
                        },
                        new
                        {
                            ProductID = 2,
                            BuyPrice = 550.00m,
                            Description = "G 1000 Front Wing V1",
                            Manufacturer = "Slingshot",
                            ProdCatId = 2,
                            SellPrice = 630.00m,
                            Stock = 8
                        },
                        new
                        {
                            ProductID = 3,
                            BuyPrice = 640.00m,
                            Description = "ART v2 999",
                            Manufacturer = "Axis",
                            ProdCatId = 2,
                            SellPrice = 720.00m,
                            Stock = 7
                        },
                        new
                        {
                            ProductID = 4,
                            BuyPrice = 900.00m,
                            Description = "Pump Foilboard 24L",
                            Manufacturer = "Axis",
                            ProdCatId = 1,
                            SellPrice = 1090.00m,
                            Stock = 12
                        },
                        new
                        {
                            ProductID = 5,
                            BuyPrice = 350.00m,
                            Description = "Puddle Pumper V1",
                            Manufacturer = "Slingshot",
                            ProdCatId = 1,
                            SellPrice = 400.00m,
                            Stock = 14
                        },
                        new
                        {
                            ProductID = 6,
                            BuyPrice = 1200.00m,
                            Description = "SCOOP",
                            Manufacturer = "North",
                            Notes = "Test Note",
                            ProdCatId = 1,
                            SellPrice = 1480.00m,
                            Stock = 15
                        },
                        new
                        {
                            ProductID = 7,
                            BuyPrice = 300.00m,
                            Description = "Black Standard Fuselage",
                            Manufacturer = "Axis",
                            ProdCatId = 4,
                            SellPrice = 350.00m,
                            Stock = 34
                        },
                        new
                        {
                            ProductID = 8,
                            BuyPrice = 190.00m,
                            Description = "Phantasm Fuselage",
                            Manufacturer = "Slingshot",
                            ProdCatId = 4,
                            SellPrice = 240.00m,
                            Stock = 47
                        },
                        new
                        {
                            ProductID = 9,
                            BuyPrice = 360.00m,
                            Description = "SONAR CARBON FUSELAGE",
                            Manufacturer = "North",
                            ProdCatId = 4,
                            SellPrice = 400.00m,
                            Stock = 23
                        },
                        new
                        {
                            ProductID = 10,
                            BuyPrice = 2550.00m,
                            Description = "PRO Ultra High Modulus Carbon 800",
                            Manufacturer = "Axis",
                            ProdCatId = 5,
                            SellPrice = 2750.00m,
                            Stock = 9
                        },
                        new
                        {
                            ProductID = 11,
                            BuyPrice = 1010.00m,
                            Description = "Phantasm Carbon Mast V1.1",
                            Manufacturer = "Slingshot",
                            ProdCatId = 5,
                            SellPrice = 1160.00m,
                            Stock = 11
                        },
                        new
                        {
                            ProductID = 12,
                            BuyPrice = 1000.00m,
                            Description = "SONAR CF85",
                            Manufacturer = "North",
                            ProdCatId = 5,
                            SellPrice = 1150.00m,
                            Stock = 18
                        },
                        new
                        {
                            ProductID = 13,
                            BuyPrice = 210.00m,
                            Description = "460 V2 Pump Carbon Rear Wing",
                            Manufacturer = "Axis",
                            ProdCatId = 3,
                            SellPrice = 260.00m,
                            Stock = 56
                        },
                        new
                        {
                            ProductID = 14,
                            BuyPrice = 195.00m,
                            Description = "Phantasm Stabilizer 340 Turbo-Tail V1",
                            Manufacturer = "Slingshot",
                            ProdCatId = 3,
                            SellPrice = 230.00m,
                            Stock = 46
                        },
                        new
                        {
                            ProductID = 15,
                            BuyPrice = 220.00m,
                            Description = "SONAR S320",
                            Manufacturer = "North",
                            ProdCatId = 3,
                            SellPrice = 270.00m,
                            Stock = 61
                        },
                        new
                        {
                            ProductID = 16,
                            BuyPrice = 850.00m,
                            Description = "POCKET CARBON CUSTOM",
                            Manufacturer = "F-ONE",
                            ProdCatId = 1,
                            SellPrice = 1000.00m,
                            Stock = 4
                        },
                        new
                        {
                            ProductID = 17,
                            BuyPrice = 525.00m,
                            Description = "SK8 Front Wing",
                            Manufacturer = "F-ONE",
                            ProdCatId = 2,
                            SellPrice = 675.00m,
                            Stock = 3
                        },
                        new
                        {
                            ProductID = 18,
                            BuyPrice = 320.00m,
                            Description = "FUSELAGE CARBON SHORT",
                            Manufacturer = "F-ONE",
                            ProdCatId = 4,
                            SellPrice = 390.00m,
                            Stock = 11
                        },
                        new
                        {
                            ProductID = 19,
                            BuyPrice = 380.00m,
                            Description = "CARBON MAST 16",
                            Manufacturer = "F-ONE",
                            ProdCatId = 5,
                            SellPrice = 470.00m,
                            Stock = 5
                        },
                        new
                        {
                            ProductID = 20,
                            BuyPrice = 400.00m,
                            Description = "MONOBLOC TAIL CARVING",
                            Manufacturer = "F-ONE",
                            ProdCatId = 3,
                            SellPrice = 460.00m,
                            Stock = 17
                        });
                });

            modelBuilder.Entity("CWhiteH60Store.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("ProdCat")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("CategoryID");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            ProdCat = "Foil Boards"
                        },
                        new
                        {
                            CategoryID = 2,
                            ProdCat = "Front Wings"
                        },
                        new
                        {
                            CategoryID = 3,
                            ProdCat = "Stabilizers"
                        },
                        new
                        {
                            CategoryID = 4,
                            ProdCat = "Fuselage"
                        },
                        new
                        {
                            CategoryID = 5,
                            ProdCat = "Masts"
                        });
                });

            modelBuilder.Entity("CWhiteH60Store.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CWhiteH60Store.Models.CartItem", b =>
                {
                    b.HasOne("CWhiteH60Store.Models.ShoppingCart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWhiteH60Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Customer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("CWhiteH60Store.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Order", b =>
                {
                    b.HasOne("CWhiteH60Store.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.OrderItem", b =>
                {
                    b.HasOne("CWhiteH60Store.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWhiteH60Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Product", b =>
                {
                    b.HasOne("CWhiteH60Store.Models.ProductCategory", "ProdCat")
                        .WithMany("Products")
                        .HasForeignKey("ProdCatId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProdCat");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.ShoppingCart", b =>
                {
                    b.HasOne("CWhiteH60Store.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("CWhiteH60Store.Models.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CWhiteH60Store.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
